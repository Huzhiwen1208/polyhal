searchState.loadedDescShard("polyhal", 0, "This is a crate to help you supporting multiple platforms.\nKernel Context\nKernel Context Arg Type.\nKernel Program Counter\nKernel Stack Pointer\nKernel Thread Pointer\nEvery core has a unique area of memory. Just using …\nTrap Frame Arg Type\nCreate a new blank Kernel Context.\nContext Switch\nContext Switch With Page Table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the number of cpus\nGet the fdt\nGet the memory area, this function should be called after …\nInit arch with page allocator, like log crate Please …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn Some(()) if it was interrupt by syscall, otherwise …\n调用 SBI_SHUTDOWN 来关闭操作系统（直接退出 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet n level page table index of the given virtual address\nGet n level page table offset of the given virtual address\nBoot Stack Size. TODO: reduce the boot stack size. Map …\nThe size of the trap frame(diffent in each architecture.).\nThis is a console for debugging, If you want to use this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlatform Instruction Instruction::ebreak Intruction …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIRQ interface for exposing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is a barrier function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is a leader for the multicore operation\nBoot all application cores.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nAccessed Flag\nCache Flag, indicating that the page will be cached\nDirty Flag, indicating that the page was written\nDevice Flag, indicating that the page was used for device …\nGlobal Flag\nMapping flags for page table.\nThis structure indicates size of the page that will be …\nPersent\nPage Table\nPage Table Wrapper\nReadable Flag\nRead | Write | Executeable Flags\nTLB Operation set. Such as flush_vaddr, flush_all. Just …\nUser Accessable Flag\nUser | Read | Write Flags\nUser | Read | Write | Executeable Flags\nUser | Read | Executeable Flags\nWriteable Flag\nExecuteable Flag\nGet a flags value with all known bits set.\nAlloc a new PageTableWrapper with new page table root This …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nflush all tlb entry\nflush the TLB entry by VirtualAddress just use it directly\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMapping a page to specific address(kernel space address).\nMapping a page to specific virtual page (user space …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRelease the page table entry.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTranslate a virtual adress to a physical address and …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmap a page from specific virtual page (user space …\nTime struct and its interface\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts hardware ticks to nanoseconds.")